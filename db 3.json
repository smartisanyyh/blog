{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/local-search.js","path":"js/local-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/anime.min.js","path":"lib/anime.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","path":"lib/font-awesome/css/all.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","path":"lib/font-awesome/webfonts/fa-brands-400.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","path":"lib/font-awesome/webfonts/fa-regular-400.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","path":"lib/font-awesome/webfonts/fa-solid-900.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1}],"Cache":[{"_id":"source/categories/index.md","hash":"57bdbe8a1205e3053f9c42c860eb376ac63f0f4f","modified":1620638558796},{"_id":"source/_posts/.DS_Store","hash":"1a984b6844f8bf082b6d05476fb12545845fe194","modified":1640227672788},{"_id":"source/tags/index.md","hash":"68e1c9c7241c0994ec4dcb27f95c3e41e81f7b8b","modified":1620637536987},{"_id":"source/_posts/_中医/方剂.md","hash":"f4235f33941147e05f0b5ef21a5bfd6aef0627e7","modified":1621933878892},{"_id":"source/_posts/_中医/病机变化.md","hash":"e4a0871a7f577468416c1adead61cef07963c593","modified":1621934086245},{"_id":"source/_posts/_中医/症状总结.md","hash":"d442214b077cbaeef2b154c1cd3a82f6fd7568d8","modified":1622170404334},{"_id":"source/_posts/技术/Java/并发/2021-12-23-synchronized.md","hash":"a5912a06cb332c853e0d11c84ef3a8371b0c2619","modified":1640346662331},{"_id":"source/_posts/技术/Java/.DS_Store","hash":"e6aab4948c2e7af3d1cbcb2a3bc487baf5704591","modified":1640241316082},{"_id":"source/_posts/技术/.DS_Store","hash":"a6ce4b63fd19d19b9dd559d7344fb19a65dbb2bc","modified":1640227296576},{"_id":"source/_posts/技术/Java/并发/.DS_Store","hash":"f0423fe2298f759e0981699e6ca512fbc17d80da","modified":1640346144706},{"_id":"themes/next/.eslintrc.json","hash":"cc5f297f0322672fe3f684f823bc4659e4a54c41","modified":1620637224111},{"_id":"themes/next/.editorconfig","hash":"8570735a8d8d034a3a175afd1dd40b39140b3e6a","modified":1620637224111},{"_id":"themes/next/.travis.yml","hash":"ecca3b919a5b15886e3eca58aa84aafc395590da","modified":1620637224114},{"_id":"themes/next/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":1620637224111},{"_id":"themes/next/.gitignore","hash":"56f3470755c20311ddd30d421b377697a6e5e68b","modified":1620637224114},{"_id":"themes/next/.stylintrc","hash":"2cf4d637b56d8eb423f59656a11f6403aa90f550","modified":1620637224114},{"_id":"themes/next/LICENSE.md","hash":"18144d8ed58c75af66cb419d54f3f63374cd5c5b","modified":1620637224115},{"_id":"themes/next/README.md","hash":"9b4b7d66aca47f9c65d6321b14eef48d95c4dff1","modified":1620637224115},{"_id":"themes/next/package.json","hash":"62fad6de02adbbba9fb096cbe2dcc15fe25f2435","modified":1620637224138},{"_id":"themes/next/gulpfile.js","hash":"1b4fc262b89948937b9e3794de812a7c1f2f3592","modified":1620637224121},{"_id":"themes/next/_config.yml","hash":"ccd41ed5fc3027f81834c30fe4b67c0dac742dea","modified":1620637224115},{"_id":"themes/next/.github/config.yml","hash":"1d3f4e8794986817c0fead095c74f756d45f91ed","modified":1620637224113},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"e554931b98f251fd49ff1d2443006d9ea2c20461","modified":1620637224112},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1620637224115},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"aa4cb7aff595ca628cb58160ee1eee117989ec4e","modified":1620637224111},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"1a435c20ae8fa183d49bbf96ac956f7c6c25c8af","modified":1620637224113},{"_id":"themes/next/.github/issue-close-app.yml","hash":"7cba457eec47dbfcfd4086acd1c69eaafca2f0cd","modified":1620637224113},{"_id":"themes/next/.github/issue_label_bot.yaml","hash":"fca600ddef6f80c5e61aeed21722d191e5606e5b","modified":1620637224113},{"_id":"themes/next/.github/lock.yml","hash":"61173b9522ebac13db2c544e138808295624f7fd","modified":1620637224113},{"_id":"themes/next/.github/mergeable.yml","hash":"0ee56e23bbc71e1e76427d2bd255a9879bd36e22","modified":1620637224114},{"_id":"themes/next/.github/release-drafter.yml","hash":"3cc10ce75ecc03a5ce86b00363e2a17eb65d15ea","modified":1620637224114},{"_id":"themes/next/docs/AUTHORS.md","hash":"10135a2f78ac40e9f46b3add3e360c025400752f","modified":1620637224116},{"_id":"themes/next/.github/support.yml","hash":"d75db6ffa7b4ca3b865a925f9de9aef3fc51925c","modified":1620637224114},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"c7a994b9542040317d8f99affa1405c143a94a38","modified":1620637224116},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1620637224116},{"_id":"themes/next/.github/stale.yml","hash":"fdf82de9284f8bc8e0b0712b4cc1cb081a94de59","modified":1620637224114},{"_id":"themes/next/docs/INSTALLATION.md","hash":"af88bcce035780aaa061261ed9d0d6c697678618","modified":1620637224117},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"94dc3404ccb0e5f663af2aa883c1af1d6eae553d","modified":1620637224117},{"_id":"themes/next/docs/LICENSE.txt","hash":"368bf2c29d70f27d8726dd914f1b3211cae4bbab","modified":1620637224117},{"_id":"themes/next/docs/DATA-FILES.md","hash":"cddbdc91ee9e65c37a50bec12194f93d36161616","modified":1620637224117},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"8b6e4b2c9cfcb969833092bdeaed78534082e3e6","modified":1620637224118},{"_id":"themes/next/docs/MATH.md","hash":"d645b025ec7fb9fbf799b9bb76af33b9f5b9ed93","modified":1620637224118},{"_id":"themes/next/languages/ar.yml","hash":"9815e84e53d750c8bcbd9193c2d44d8d910e3444","modified":1620637224122},{"_id":"themes/next/languages/de.yml","hash":"74c59f2744217003b717b59d96e275b54635abf5","modified":1620637224122},{"_id":"themes/next/languages/es.yml","hash":"c64cf05f356096f1464b4b1439da3c6c9b941062","modified":1620637224122},{"_id":"themes/next/languages/en.yml","hash":"45bc5118828bdc72dcaa25282cd367c8622758cb","modified":1620637224122},{"_id":"themes/next/languages/fa.yml","hash":"3676b32fda37e122f3c1a655085a1868fb6ad66b","modified":1620637224123},{"_id":"themes/next/languages/default.yml","hash":"45bc5118828bdc72dcaa25282cd367c8622758cb","modified":1620637224122},{"_id":"themes/next/languages/hu.yml","hash":"b1ebb77a5fd101195b79f94de293bcf9001d996f","modified":1620637224123},{"_id":"themes/next/languages/it.yml","hash":"44759f779ce9c260b895532de1d209ad4bd144bf","modified":1620637224123},{"_id":"themes/next/languages/fr.yml","hash":"752bf309f46a2cd43890b82300b342d7218d625f","modified":1620637224123},{"_id":"themes/next/languages/id.yml","hash":"572ed855d47aafe26f58c73b1394530754881ec2","modified":1620637224123},{"_id":"themes/next/languages/nl.yml","hash":"5af3473d9f22897204afabc08bb984b247493330","modified":1620637224124},{"_id":"themes/next/languages/pt.yml","hash":"718d131f42f214842337776e1eaddd1e9a584054","modified":1620637224124},{"_id":"themes/next/languages/ko.yml","hash":"0feea9e43cd399f3610b94d755a39fff1d371e97","modified":1620637224124},{"_id":"themes/next/languages/ja.yml","hash":"0cf0baa663d530f22ff380a051881216d6adcdd8","modified":1620637224124},{"_id":"themes/next/languages/pt-BR.yml","hash":"67555b1ba31a0242b12fc6ce3add28531160e35b","modified":1620637224124},{"_id":"themes/next/languages/tr.yml","hash":"fe793f4c2608e3f85f0b872fd0ac1fb93e6155e2","modified":1620637224125},{"_id":"themes/next/languages/vi.yml","hash":"93393b01df148dcbf0863f6eee8e404e2d94ef9e","modified":1620637224125},{"_id":"themes/next/languages/ru.yml","hash":"e993d5ca072f7f6887e30fc0c19b4da791ca7a88","modified":1620637224125},{"_id":"themes/next/languages/uk.yml","hash":"3a6d635b1035423b22fc86d9455dba9003724de9","modified":1620637224125},{"_id":"themes/next/languages/zh-CN.yml","hash":"a1f15571ee7e1e84e3cc0985c3ec4ba1a113f6f8","modified":1620637224126},{"_id":"themes/next/languages/zh-TW.yml","hash":"8c09da7c4ec3fca2c6ee897b2eea260596a2baa1","modified":1620637224126},{"_id":"themes/next/languages/zh-HK.yml","hash":"3789f94010f948e9f23e21235ef422a191753c65","modified":1620637224126},{"_id":"themes/next/layout/_layout.swig","hash":"6a6e92a4664cdb981890a27ac11fd057f44de1d5","modified":1620637224126},{"_id":"themes/next/layout/category.swig","hash":"1bde61cf4d2d171647311a0ac2c5c7933f6a53b0","modified":1620637224137},{"_id":"themes/next/layout/index.swig","hash":"7f403a18a68e6d662ae3e154b2c1d3bbe0801a23","modified":1620637224137},{"_id":"themes/next/scripts/renderer.js","hash":"49a65df2028a1bc24814dc72fa50d52231ca4f05","modified":1620637224141},{"_id":"themes/next/layout/page.swig","hash":"db581bdeac5c75fabb0f17d7c5e746e47f2a9168","modified":1620637224137},{"_id":"themes/next/layout/tag.swig","hash":"0dfb653bd5de980426d55a0606d1ab122bd8c017","modified":1620637224138},{"_id":"themes/next/layout/archive.swig","hash":"e4e31317a8df68f23156cfc49e9b1aa9a12ad2ed","modified":1620637224137},{"_id":"themes/next/layout/post.swig","hash":"2f6d992ced7e067521fdce05ffe4fd75481f41c5","modified":1620637224138},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"c3e6b8196c983c40fd140bdeca012d03e6e86967","modified":1620637224112},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"12d99fb8b62bd9e34d9672f306c9ae4ace7e053e","modified":1620637224112},{"_id":"themes/next/.github/ISSUE_TEMPLATE/other.md","hash":"d3efc0df0275c98440e69476f733097916a2d579","modified":1620637224112},{"_id":"themes/next/.github/ISSUE_TEMPLATE/question.md","hash":"53df7d537e26aaf062d70d86835c5fd8f81412f3","modified":1620637224113},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"9c4fe2873123bf9ceacab5c50d17d8a0f1baef27","modified":1620637224119},{"_id":"themes/next/docs/ru/README.md","hash":"85dd68ed1250897a8e4a444a53a68c1d49eb7e11","modified":1620637224119},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"0bd2d696f62a997a11a7d84fec0130122234174e","modified":1620637224118},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"5237a368ab99123749d724b6c379415f2c142a96","modified":1620637224119},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"fb23b85db6f7d8279d73ae1f41631f92f64fc864","modified":1620637224119},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"d3f03be036b75dc71cf3c366cd75aee7c127c874","modified":1620637224120},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"34b88784ec120dfdc20fa82aadeb5f64ef614d14","modified":1620637224119},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"ca1030efdfca5e20f9db2e7a428998e66a24c0d0","modified":1620637224120},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"579c7bd8341873fb8be4732476d412814f1a3df7","modified":1620637224120},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"b92585d251f1f9ebe401abb5d932cb920f9b8b10","modified":1620637224121},{"_id":"themes/next/docs/zh-CN/README.md","hash":"c038629ff8f3f24e8593c4c8ecf0bef3a35c750d","modified":1620637224121},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"8b18f84503a361fc712b0fe4d4568e2f086ca97d","modified":1620637224120},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"d9ce7331c1236bbe0a551d56cef2405e47e65325","modified":1620637224121},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"9c8dc0b8170679cdc1ee9ee8dbcbaebf3f42897b","modified":1620637224127},{"_id":"themes/next/layout/_macro/post.swig","hash":"090b5a9b6fca8e968178004cbd6cff205b7eba57","modified":1620637224127},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"71655ca21907e9061b6e8ac52d0d8fbf54d0062b","modified":1620637224127},{"_id":"themes/next/layout/_partials/comments.swig","hash":"db6ab5421b5f4b7cb32ac73ad0e053fdf065f83e","modified":1620637224127},{"_id":"themes/next/layout/_partials/footer.swig","hash":"4369b313cbbeae742cb35f86d23d99d4285f7359","modified":1620637224127},{"_id":"themes/next/layout/_partials/languages.swig","hash":"ba9e272f1065b8f0e8848648caa7dea3f02c6be1","modified":1620637224129},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9876dbfc15713c7a47d4bcaa301f4757bd978269","modified":1620637224129},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"d1f2bfde6f1da51a2b35a7ab9e7e8eb6eefd1c6b","modified":1620637224131},{"_id":"themes/next/layout/_partials/widgets.swig","hash":"83a40ce83dfd5cada417444fb2d6f5470aae6bb0","modified":1620637224131},{"_id":"themes/next/layout/_scripts/index.swig","hash":"cea942b450bcb0f352da78d76dc6d6f1d23d5029","modified":1620637224131},{"_id":"themes/next/layout/_scripts/pjax.swig","hash":"4d2c93c66e069852bb0e3ea2e268d213d07bfa3f","modified":1620637224131},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"ef38c213679e7b6d2a4116f56c9e55d678446069","modified":1620637224132},{"_id":"themes/next/layout/_scripts/three.swig","hash":"a4f42f2301866bd25a784a2281069d8b66836d0b","modified":1620637224132},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"b782eb2e34c0c15440837040b5d65b093ab6ec04","modified":1620637224133},{"_id":"themes/next/layout/_third-party/index.swig","hash":"70c3c01dd181de81270c57f3d99b6d8f4c723404","modified":1620637224135},{"_id":"themes/next/scripts/events/index.js","hash":"5743cde07f3d2aa11532a168a652e52ec28514fd","modified":1620637224138},{"_id":"themes/next/scripts/filters/locals.js","hash":"b193a936ee63451f09f8886343dcfdca577c0141","modified":1620637224140},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"311e5eceec9e949f1ea8d623b083cec0b8700ff2","modified":1620637224135},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"2731e262a6b88eaee2a3ca61e6a3583a7f594702","modified":1620637224135},{"_id":"themes/next/scripts/filters/front-matter.js","hash":"703bdd142a671b4b67d3d9dfb4a19d1dd7e7e8f7","modified":1620637224140},{"_id":"themes/next/scripts/filters/post.js","hash":"44ba9b1c0bdda57590b53141306bb90adf0678db","modified":1620637224140},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"aec50ed57b9d5d3faf2db3c88374f107203617e0","modified":1620637224140},{"_id":"themes/next/scripts/filters/minify.js","hash":"19985723b9f677ff775f3b17dcebf314819a76ac","modified":1620637224140},{"_id":"themes/next/scripts/helpers/engine.js","hash":"bdb424c3cc0d145bd0c6015bb1d2443c8a9c6cda","modified":1620637224141},{"_id":"themes/next/scripts/helpers/font.js","hash":"40cf00e9f2b7aa6e5f33d412e03ed10304b15fd7","modified":1620637224141},{"_id":"themes/next/scripts/helpers/next-config.js","hash":"5e11f30ddb5093a88a687446617a46b048fa02e5","modified":1620637224141},{"_id":"themes/next/scripts/tags/button.js","hash":"8c6b45f36e324820c919a822674703769e6da32c","modified":1620637224142},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"958e86b2bd24e4fdfcbf9ce73e998efe3491a71f","modified":1620637224141},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"94e0bbc7999b359baa42fa3731bdcf89c79ae2b3","modified":1620637224142},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"f1826ade2d135e2f60e2d95cb035383685b3370c","modified":1620637224142},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"d902fd313e8d35c3cc36f237607c2a0536c9edf1","modified":1620637224142},{"_id":"themes/next/scripts/tags/label.js","hash":"fc5b267d903facb7a35001792db28b801cccb1f8","modified":1620637224142},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"983c6c4adea86160ecc0ba2204bc312aa338121d","modified":1620637224142},{"_id":"themes/next/scripts/tags/note.js","hash":"0a02bb4c15aec41f6d5f1271cdb5c65889e265d9","modified":1620637224142},{"_id":"themes/next/scripts/tags/tabs.js","hash":"93d8a734a3035c1d3f04933167b500517557ba3e","modified":1620637224143},{"_id":"themes/next/scripts/tags/pdf.js","hash":"8c613b39e7bff735473e35244b5629d02ee20618","modified":1620637224143},{"_id":"themes/next/scripts/tags/video.js","hash":"e5ff4c44faee604dd3ea9db6b222828c4750c227","modified":1620637224143},{"_id":"themes/next/source/css/_colors.styl","hash":"a8442520f719d3d7a19811cb3b85bcfd4a596e1f","modified":1620637224143},{"_id":"themes/next/source/css/_mixins.styl","hash":"e31a557f8879c2f4d8d5567ee1800b3e03f91f6e","modified":1620637224153},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1620637224157},{"_id":"themes/next/source/css/main.styl","hash":"a3a3bbb5a973052f0186b3523911cb2539ff7b88","modified":1620637224157},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1620637224157},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1620637224158},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1620637224158},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1620637224158},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1620637224159},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1620637224158},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1620637224159},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1620637224159},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1620637224159},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1620637224159},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1620637224160},{"_id":"themes/next/source/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1620637224160},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1620637224159},{"_id":"themes/next/source/js/algolia-search.js","hash":"498d233eb5c7af6940baf94c1a1c36fdf1dd2636","modified":1620637224160},{"_id":"themes/next/source/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1620637224160},{"_id":"themes/next/source/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1620637224160},{"_id":"themes/next/source/js/next-boot.js","hash":"a1b0636423009d4a4e4cea97bcbf1842bfab582c","modified":1620637224161},{"_id":"themes/next/source/js/utils.js","hash":"730cca7f164eaf258661a61ff3f769851ff1e5da","modified":1620637224161},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"000bad572d76ee95d9c0a78f9ccdc8d97cc7d4b4","modified":1620637224127},{"_id":"themes/next/source/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1620637224162},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"7dbe93b8297b746afb89700b4d29289556e85267","modified":1620637224128},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"810d544019e4a8651b756dd23e5592ee851eda71","modified":1620637224128},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"c70f8e71e026e878a4e9d5ab3bbbf9b0b23c240c","modified":1620637224128},{"_id":"themes/next/layout/_partials/header/menu-item.swig","hash":"9440d8a3a181698b80e1fa47f5104f4565d8cdf3","modified":1620637224128},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"d31f896680a6c2f2c3f5128b4d4dd46c87ce2130","modified":1620637224128},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"ae2261bea836581918a1c2b0d1028a78718434e0","modified":1620637224129},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"c851717497ca64789f2176c9ecd1dedab237b752","modified":1620637224129},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"954ad71536b6eb08bd1f30ac6e2f5493b69d1c04","modified":1620637224129},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"9b7a66791d7822c52117fe167612265356512477","modified":1620637224129},{"_id":"themes/next/layout/_partials/post/post-footer.swig","hash":"8f14f3f8a1b2998d5114cc56b680fb5c419a6b07","modified":1620637224130},{"_id":"themes/next/layout/_partials/post/post-followme.swig","hash":"ceba16b9bd3a0c5c8811af7e7e49d0f9dcb2f41e","modified":1620637224129},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"f79c44692451db26efce704813f7a8872b7e63a0","modified":1620637224130},{"_id":"themes/next/layout/_partials/post/post-reward.swig","hash":"2b1a73556595c37951e39574df5a3f20b2edeaef","modified":1620637224130},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"48430bd03b8f19c9b8cdb2642005ed67d56c6e0b","modified":1620637224130},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"f48a6a8eba04eb962470ce76dd731e13074d4c45","modified":1620637224130},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"2be50f9bfb1c56b85b3b6910a7df27f51143632c","modified":1620637224130},{"_id":"themes/next/layout/_partials/sidebar/site-overview.swig","hash":"c46849e0af8f8fb78baccd40d2af14df04a074af","modified":1620637224131},{"_id":"themes/next/layout/_scripts/pages/schedule.swig","hash":"077b5d66f6309f2e7dcf08645058ff2e03143e6c","modified":1620637224131},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1620637224132},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1620637224132},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1620637224132},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1620637224132},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"4790058691b7d36cf6d2d6b4e93795a7b8d608ad","modified":1620637224133},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"5adea065641e8c55994dd2328ddae53215604928","modified":1620637224133},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"1472cabb0181f60a6a0b7fec8899a4d03dfb2040","modified":1620637224133},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"2fa2b51d56bfac6a1ea76d651c93b9c20b01c09b","modified":1620637224133},{"_id":"themes/next/layout/_third-party/chat/chatra.swig","hash":"f910618292c63871ca2e6c6e66c491f344fa7b1f","modified":1620637224133},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"f39a5bf3ce9ee9adad282501235e0c588e4356ec","modified":1620637224134},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b14908644225d78c864cd0a9b60c52407de56183","modified":1620637224134},{"_id":"themes/next/layout/_third-party/chat/tidio.swig","hash":"cba0e6e0fad08568a9e74ba9a5bee5341cfc04c1","modified":1620637224134},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"82f5b6822aa5ec958aa987b101ef860494c6cf1f","modified":1620637224134},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"d6ceb70648555338a80ae5724b778c8c58d7060d","modified":1620637224134},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"be0a8eccf1f6dc21154af297fc79555343031277","modified":1620637224135},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"f7a9eca599a682479e8ca863db59be7c9c7508c8","modified":1620637224134},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"6c5976621efd5db5f7c4c6b4f11bc79d6554885f","modified":1620637224135},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"4791c977a730f29c846efcf6c9c15131b9400ead","modified":1620637224135},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"ecf751321e799f0fb3bf94d049e535130e2547aa","modified":1620637224135},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"d35a999d67f4c302f76fdf13744ceef3c6506481","modified":1620637224136},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"767b6c714c22588bcd26ba70b0fc19b6810cbacd","modified":1620637224136},{"_id":"themes/next/layout/_third-party/search/swiftype.swig","hash":"ba0dbc06b9d244073a1c681ff7a722dcbf920b51","modified":1620637224136},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.swig","hash":"4b1986e43d6abce13450d2b41a736dd6a5620a10","modified":1620637224136},{"_id":"themes/next/layout/_third-party/statistics/cnzz-analytics.swig","hash":"a17ace37876822327a2f9306a472974442c9005d","modified":1620637224136},{"_id":"themes/next/layout/_third-party/statistics/firestore.swig","hash":"b26ac2bfbe91dd88267f8b96aee6bb222b265b7a","modified":1620637224136},{"_id":"themes/next/layout/_third-party/statistics/index.swig","hash":"5f6a966c509680dbfa70433f9d658cee59c304d7","modified":1620637224136},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.swig","hash":"d56d5af427cdfecc33a0f62ee62c056b4e33d095","modified":1620637224137},{"_id":"themes/next/layout/_third-party/tags/pdf.swig","hash":"d30b0e255a8092043bac46441243f943ed6fb09b","modified":1620637224137},{"_id":"themes/next/layout/_third-party/tags/mermaid.swig","hash":"f3c43664a071ff3c0b28bd7e59b5523446829576","modified":1620637224137},{"_id":"themes/next/scripts/events/lib/config.js","hash":"d34c6040b13649714939f59be5175e137de65ede","modified":1620637224138},{"_id":"themes/next/scripts/events/lib/injects-point.js","hash":"6661c1c91c7cbdefc6a5e6a034b443b8811235a1","modified":1620637224138},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"f233d8d0103ae7f9b861344aa65c1a3c1de8a845","modified":1620637224139},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"a54708fd9309b4357c423a3730eb67f395344a5e","modified":1620637224139},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"2486f3e0150c753e5f3af1a3665d074704b8ee2c","modified":1620637224139},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"7f2d93af012c1e14b8596fecbfc7febb43d9b7f5","modified":1620637224139},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"7f8b92913d21070b489457fa5ed996d2a55f2c32","modified":1620637224139},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"4c0c99c7e0f00849003dfce02a131104fb671137","modified":1620637224139},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"e51dc3072c1ba0ea3008f09ecae8b46242ec6021","modified":1620637224139},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"d5fefc31fba4ab0188305b1af1feb61da49fdeb0","modified":1620637224140},{"_id":"themes/next/scripts/filters/comment/valine.js","hash":"6cbd85f9433c06bae22225ccf75ac55e04f2d106","modified":1620637224140},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"f70be8e229da7e1715c11dd0e975a2e71e453ac8","modified":1620637224156},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"f4e694e5db81e57442c7e34505a416d818b3044a","modified":1620637224156},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"62df49459d552bbf73841753da8011a1f5e875c8","modified":1620637224156},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"612ec843372dae709acb17112c1145a53450cc59","modified":1620637224157},{"_id":"themes/next/source/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1620637224161},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1620637224161},{"_id":"themes/next/source/css/_variables/base.styl","hash":"818508748b7a62e02035e87fe58e75b603ed56dc","modified":1620637224157},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"a47725574e1bee3bc3b63b0ff2039cc982b17eff","modified":1620637224144},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"2e3bf7baf383c9073ec5e67f157d3cb3823c0957","modified":1620637224146},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"8e7b57a72e757cf95278239641726bb2d5b869d1","modified":1620637224144},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"ca5e70662dcfb261c25191cc5db5084dcf661c76","modified":1620637224143},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1620637224164},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1620637224164},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"a2e9e00962e43e98ec2614d6d248ef1773bb9b78","modified":1620637224150},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"681d33e3bc85bdca407d93b134c089264837378c","modified":1620637224148},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"a1690e035b505d28bdef2b4424c13fc6312ab049","modified":1620637224148},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"0b2c4b78eead410020d7c4ded59c75592a648df8","modified":1620637224150},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"b1f0fab7344a20ed6748b04065b141ad423cf4d9","modified":1620637224150},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1620637224151},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"8f58570a1bbc34c4989a47a1b7d42a8030f38b06","modified":1620637224152},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1620637224152},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"18ce72d90459c9aa66910ac64eae115f2dde3767","modified":1620637224152},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"179e33b8ac7f4d8a8e76736a7e4f965fe9ab8b42","modified":1620637224153},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"bb7ace23345364eb14983e860a7172e1683a4c94","modified":1620637224154},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"7104b9cef90ca3b140d7a7afcf15540a250218fc","modified":1620637224154},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"7785bd756e0c4acede3a47fec1ed7b55988385a5","modified":1620637224153},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"f6516d0f7d89dc7b6c6e143a5af54b926f585d82","modified":1620637224154},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"a717969829fa6ef88225095737df3f8ee86c286b","modified":1620637224154},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"6136da4bbb7e70cec99f5c7ae8c7e74f5e7c261a","modified":1620637224154},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"4d1c17345d2d39ef7698f7acf82dfc0f59308c34","modified":1620637224154},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"2b2e7b5cea7783c9c8bb92655e26a67c266886f0","modified":1620637224155},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"93db5dafe9294542a6b5f647643cb9deaced8e06","modified":1620637224154},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"f0131db6275ceaecae7e1a6a3798b8f89f6c850d","modified":1620637224154},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1620637224155},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1620637224155},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"e282df938bd029f391c466168d0e68389978f120","modified":1620637224155},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"70a4324b70501132855b5e59029acfc5d3da1ebd","modified":1620637224155},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"85da2f3006f4bef9a2199416ecfab4d288f848c4","modified":1620637224156},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"44f47c88c06d89d06f220f102649057118715828","modified":1620637224156},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"e740deadcfc4f29c5cb01e40f9df6277262ba4e3","modified":1620637224156},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1620637224163},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1620637224156},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"fafc96c86926b22afba8bb9418c05e6afbc05a57","modified":1620637224144},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"2bd0eb1512415325653b26d62a4463e6de83c5ac","modified":1620637224144},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1620637224144},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"e771dcb0b4673e063c0f3e2d73e7336ac05bcd57","modified":1620637224144},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1620637224163},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"d21d4ac1982c13d02f125a67c065412085a92ff2","modified":1620637224144},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"e75693f33dbc92afc55489438267869ae2f3db54","modified":1620637224145},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f49ca072b5a800f735e8f01fc3518f885951dd8e","modified":1620637224145},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"902569a9dea90548bec21a823dd3efd94ff7c133","modified":1620637224145},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"ded41fd9d20a5e8db66aaff7cc50f105f5ef2952","modified":1620637224145},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"1e4190c10c9e0c9ce92653b0dbcec21754b0b69d","modified":1620637224145},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"65cb6edb69e94e70e3291e9132408361148d41d5","modified":1620637224145},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"72d495a88f7d6515af425c12cbc67308a57d88ea","modified":1620637224145},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"d114b2a531129e739a27ba6271cfe6857aa9a865","modified":1620637224146},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"6a97bcfa635d637dc59005be3b931109e0d1ead5","modified":1620637224146},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"f5c2788a78790aca1a2f37f7149d6058afb539e0","modified":1620637224146},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"99e12c9ce3d14d4837e3d3f12fc867ba9c565317","modified":1620637224146},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"5b5649b9749e3fd8b63aef22ceeece0a6e1df605","modified":1620637224146},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"a760ee83ba6216871a9f14c5e56dc9bd0d9e2103","modified":1620637224146},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"8a7fc03a568b95be8d3337195e38bc7ec5ba2b23","modified":1620637224147},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"b49e9fbd3c182b8fc066b8c2caf248e3eb748619","modified":1620637224147},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"e2992846b39bf3857b5104675af02ba73e72eed5","modified":1620637224147},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"9f0b93d109c9aec79450c8a0cf4a4eab717d674d","modified":1620637224147},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"9a878d0119785a2316f42aebcceaa05a120b9a7a","modified":1620637224147},{"_id":"themes/next/source/css/_common/outline/footer/footer.styl","hash":"454a4aebfabb4469b92a8cbb49f46c49ac9bf165","modified":1620637224147},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"e2d606f1ac343e9be4f15dbbaf3464bc4df8bf81","modified":1620637224147},{"_id":"themes/next/source/css/_common/outline/header/header.styl","hash":"a793cfff86ad4af818faef04c18013077873f8f0","modified":1620637224148},{"_id":"themes/next/source/css/_common/outline/header/headerband.styl","hash":"0caf32492692ba8e854da43697a2ec8a41612194","modified":1620637224148},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"5f432a6ed9ca80a413c68b00e93d4a411abf280a","modified":1620637224148},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"e7a9fdb6478b8674b1cdf94de4f8052843fb71d9","modified":1620637224148},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"45a239edca44acecf971d99b04f30a1aafbf6906","modified":1620637224148},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"b2fc519828fe89a1f8f03ff7b809ad68cd46f3d7","modified":1620637224148},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"2cb1876e9e0c9ac32160888af27b1178dbcb0616","modified":1620637224149},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"44487d9ab290dc97871fa8dd4487016deb56e123","modified":1620637224149},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"1f0e7fbe80956f47087c2458ea880acf7a83078b","modified":1620637224149},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"fa0222197b5eee47e18ac864cdc6eac75678b8fe","modified":1620637224149},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"a960a2dd587b15d3b3fe1b59525d6fa971c6a6ec","modified":1620637224149},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"a05a4031e799bc864a4536f9ef61fe643cd421af","modified":1620637224149},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"b3220db827e1adbca7880c2bb23e78fa7cbe95cb","modified":1620637224150},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar.styl","hash":"a9cd93c36bae5af9223e7804963096274e8a4f03","modified":1620637224150},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"2a47f8a6bb589c2fb635e6c1e4a2563c7f63c407","modified":1620637224150},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"9b479c2f9a9bfed77885e5093b8245cc5d768ec7","modified":1620637224149},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"f71a3e86c05ea668b008cf05a81f67d92b6d65e4","modified":1620637224151},{"_id":"themes/next/source/css/_common/scaffolding/highlight/diff.styl","hash":"d3f73688bb7423e3ab0de1efdf6db46db5e34f80","modified":1620637224151},{"_id":"themes/next/source/css/_common/scaffolding/highlight/highlight.styl","hash":"35c871a809afa8306c8cde13651010e282548bc6","modified":1620637224151},{"_id":"themes/next/source/css/_common/scaffolding/highlight/theme.styl","hash":"3b3acc5caa0b95a2598bef4eeacb21bab21bea56","modified":1620637224151},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"d7fce4b51b5f4b7c31d93a9edb6c6ce740aa0d6b","modified":1620637224152},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"e4d9a77ffe98e851c1202676940097ba28253313","modified":1620637224152},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"1d2778ca5aeeeafaa690dc2766b01b352ab76a02","modified":1620637224152},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"709d10f763e357e1472d6471f8be384ec9e2d983","modified":1620637224152},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"b49c64f8e9a6ca1c45c0ba98febf1974fdd03616","modified":1620637224153},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"f23670f1d8e749f3e83766d446790d8fd9620278","modified":1620637224153},{"_id":"themes/next/source/css/_common/scaffolding/tags/tags.styl","hash":"9e4c0653cfd3cc6908fa0d97581bcf80861fb1e7","modified":1620637224153},{"_id":"themes/next/source/lib/fancybox/source/helpers/.jquery.fancybox-buttons.css.icloud","hash":"0dc1a5368e2ccdf5be172455652e0444b3f2718c","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/helpers/.jquery.fancybox-thumbs.css.icloud","hash":"aa7b8557cdbeb5fece1f3e98563df327e28322bf","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1620637224163},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1620637224164}],"Category":[{"name":"Java","_id":"ckxkbu7v40004hj6o817554dt"},{"name":"并发","parent":"ckxkbu7v40004hj6o817554dt","_id":"ckxkbu7v50006hj6ohywafg59"}],"Data":[],"Page":[{"title":"tags","date":"2021-05-10T09:05:17.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2021-05-10 17:05:17\ntype: tags\n---\n","updated":"2021-05-10T09:05:36.987Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ckxkbu7ux0000hj6ofjmwdye9","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"分类","date":"2021-05-10T09:02:28.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2021-05-10 17:02:28\ntype: categories\n---\n","updated":"2021-05-10T09:22:38.796Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ckxkbu7v20002hj6o8f5v81pm","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"synchronized","abbrlink":"edea11bc","date":"2021-12-23T02:47:33.000Z","_content":"## 常见错误  \n\n&emsp;&emsp;最近比较深入的研究了一下synchronized,发现网上百分之90的博客都是错的,下边我首先来总结一下一些常见的错误:\n\n- <font color=\"red\">无锁->偏向->轻量->重量</font>  \n\n    认为锁对象的状态转换是这么个流程的同学请刷个1,这里边存在两个问题\n    1. **并不存在无锁到偏向**这么一个过程,偏向锁只能从可偏向状态或者重偏向状态获得.  \n    偏向锁模式存在偏向锁延迟机制：\n\n        ```java\n            HotSpot 虚拟机在启动后有个 4s 的延迟才会对每个新建的对象开启偏向锁模式。JVM启动时会进行一系列的复杂活动，比如装载配置，系统类初始化等等。在这个过程中会使用大量\n            synchronized关键字对对象加锁，且这些锁大多数都不是偏向锁。为了减少初始化时间，JVM默认延时加载偏向锁。\n        ```  \n\n        在过了这个延迟偏向时间后创建出来的新对象都是可偏向状态,并不是无锁状态(除非触发了批量撤销),重偏向是触发了批量重偏向后的逻辑,只有两种获得偏向锁的途径,并不存在无锁->偏向锁.  \n    2. 偏向->轻量  \n        这个也不是一定的,轻量锁会出现在线程**交替执行**的时候.  \n\n        假如一把锁先偏向了线程A,此时A的同步代码块里的内容已执行完,并且A已释放锁(释放偏向锁并不会做什么),但是线程A还存活(如果不存活可能触发jvm层面的线程复用,直接想线程B与Jvm的线程绑定),现在线程B尝试去获取锁,此时线程B就会触发偏向锁撤销,然后将偏向锁升级为一把轻量锁.  \n\n\n        很多同学认为升级重量锁必须要激烈并发,其实不然,比如上边那个场景,如果线程B去获取锁的时候,线程A还没有释放锁,线程B会尝试获取轻量锁,但是轻量锁获取失败,线程B会直接开始膨胀,创建Monitor对象,升级为重量锁,所以升级重量锁和竞争激烈与否并没有关系,**只要有竞争,就会升级成重量锁**;\n        总结下获取锁的过程:首先看锁对象是否是可偏向,或者是否是可重偏向状态,如果是直接获取偏向锁,如果不是尝试获取轻量锁,轻量锁获取失败,直接开始膨胀为重量锁;\n- <font color=\"red\">轻量锁自旋</font>  \n    轻量锁和偏向锁都不存在自旋,只是会尝试获取,CAS获取失败直接走下一步;\n\n## 阅读源码与实验的一些发现  \n\n- 批量重偏向修改epoch修改的是正在被锁定的对象**和可偏向对象的epoch**,网上很多博客说的都是修改正在被锁定对象的epoch\n- 批量重偏向和批量撤销共用一个计数器 都会在25秒(默认值))后归零  \n\n```C++\n    static HeuristicsResult update_heuristics(oop o, bool allow_rebias) {\n        markOop mark = o->mark();\n        //如果不是偏向模式直接返回\n        if (!mark->has_bias_pattern()) {\n            return HR_NOT_BIASED;\n        }\n        // 锁对象的类\n        Klass* k = o->klass();\n        // 当前时间\n        jlong cur_time = os::javaTimeMillis();\n        // 该类上一次批量撤销的时间\n        jlong last_bulk_revocation_time = k->last_biased_lock_bulk_revocation_time();\n        // 该类偏向锁撤销的次数\n        int revocation_count = k->biased_lock_revocation_count();\n        // BiasedLockingBulkRebiasThreshold是重偏向阈值（默认20），BiasedLockingBulkRevokeThreshold是批量撤销阈值（默认40），BiasedLockingDecayTime是开启一次新的批量重偏向距离上次批量重偏向的后的延迟时间，默认25000。也就是开启批量重偏向后，经过了一段较长的时间（>=BiasedLockingDecayTime），撤销计数器才超过阈值，那我们会重置计数器。\n        if ((revocation_count >= BiasedLockingBulkRebiasThreshold) &&\n            (revocation_count <  BiasedLockingBulkRevokeThreshold) &&\n            (last_bulk_revocation_time != 0) &&\n            (cur_time - last_bulk_revocation_time >= BiasedLockingDecayTime)) {\n            // This is the first revocation we've seen in a while of an\n            // object of this type since the last time we performed a bulk\n            // rebiasing operation. The application is allocating objects in\n            // bulk which are biased toward a thread and then handing them\n            // off to another thread. We can cope with this allocation\n            // pattern via the bulk rebiasing mechanism so we reset the\n            // klass's revocation count rather than allow it to increase\n            // monotonically. If we see the need to perform another bulk\n            // rebias operation later, we will, and if subsequently we see\n            // many more revocation operations in a short period of time we\n            // will completely disable biasing for this type.\n            k->set_biased_lock_revocation_count(0);\n            revocation_count = 0;\n        }\n\n        // 自增撤销计数器\n        if (revocation_count <= BiasedLockingBulkRevokeThreshold) {\n            revocation_count = k->atomic_incr_biased_lock_revocation_count();\n        }\n        // 如果达到批量撤销阈值则返回HR_BULK_REVOKE\n        if (revocation_count == BiasedLockingBulkRevokeThreshold) {\n            return HR_BULK_REVOKE;\n        }\n        // 如果达到批量重偏向阈值则返回HR_BULK_REBIAS\n        if (revocation_count == BiasedLockingBulkRebiasThreshold) {\n            return HR_BULK_REBIAS;\n        }\n        // 没有达到阈值则撤销单个对象的锁\n        return HR_SINGLE_REVOKE;\n    }\n```\n\n### 验证\n\n```java\n    @Slf4j\n    public class Test {\n\n        public static void main(String[] args) throws InterruptedException {\n            //延时产生可偏向对象\n            Thread.sleep(5000);\n\n            // 创建一个list，来存放锁对象\n            List<Test> locks = new ArrayList<>();\n\n            // 线程1\n            new Thread(() -> {\n                for (int i = 0; i < 30; i++) {\n                    // 新建锁对象\n                    Test lock = new Test();\n                    synchronized (lock) {\n                        locks.add(lock);\n                    }\n                }\n                try {\n                    //为了防止JVM线程复用，在创建完对象后，保持线程thead1状态为存活\n                    Thread.sleep(100000);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n            }, \"thead1\").start();\n\n            //睡眠3s钟保证线程thead1创建对象完成\n            Thread.sleep(1000);\n            // 线程2\n            new Thread(() -> {\n                for (int i = 0; i < 30; i++) {\n                    Test obj = locks.get(i);\n                    synchronized (obj) {\n                        if(i>=15&&i<=21||i>=38){\n                            log.debug(Thread.currentThread().getName()+\"-第\" + (i + 1) + \"次加锁执行中\\t\"+\n                                            ClassLayout.parseInstance(obj).toPrintable());\n                        }\n                    }\n                    if(i==17||i==19){\n                        log.debug(Thread.currentThread().getName()+\"-第\" + (i + 1) + \"次释放锁\\t\"+\n                                        ClassLayout.parseInstance(obj).toPrintable());\n                    }\n                }\n                try {\n                    Thread.sleep(100000);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n            }, \"thead2\").start();\n        /*如果下边的20-30个对象任然可以重偏向,则说明批量重偏向和批量撤销共用一个计数器 都会在25秒(默认值)后归零,\n          而且最后new的新对象任然是可偏向状态101,如果注释掉的话这行代码则创建的新对象是无锁状态(批量撤销,关闭该Class的偏向锁功能),\n          而且下边的20-30个对象会变成轻量锁*/\n            Thread.sleep(26000);\n\n            // 创建一个list，来存放锁对象\n            List<Test> locks1 = new ArrayList<>();\n\n            // 线程1\n            new Thread(() -> {\n                for (int i = 0; i < 30; i++) {\n                    // 新建锁对象\n                    Test lock = new Test();\n                    synchronized (lock) {\n                        locks1.add(lock);\n                    }\n                }\n                try {\n                    //为了防止JVM线程复用，在创建完对象后，保持线程thead1状态为存活\n                    Thread.sleep(100000);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n            }, \"thead3\").start();\n\n            //睡眠3s钟保证线程thead1创建对象完成\n            Thread.sleep(1000);\n            // 线程2\n            new Thread(() -> {\n                for (int i = 0; i < 30; i++) {\n                    Test obj = locks1.get(i);\n                    synchronized (obj) {\n                        if(i>=15&&i<=21||i>=38){\n                            log.debug(Thread.currentThread().getName()+\"-第\" + (i + 1) + \"次加锁执行中\\t\"+\n                                            ClassLayout.parseInstance(obj).toPrintable());\n                        }\n                    }\n                    if(i==17||i==19){\n                        log.debug(Thread.currentThread().getName()+\"-第\" + (i + 1) + \"次释放锁\\t\"+\n                                        ClassLayout.parseInstance(obj).toPrintable());\n                    }\n                }\n                try {\n                    Thread.sleep(100000);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n            }, \"thead4\").start();\n            Thread.sleep(3000);\n            Test test = new Test();\n            log.debug(\"新对象:\" + (ClassLayout.parseInstance(test).toPrintable()));\n            LockSupport.park();\n        }\n    }\n```\n\n其他介绍请参考[github](https://github.com/farmerjohngit/myblog/issues/12),这是一篇非常好的博客,写的很详细,我也就不重复总结了.  \n","source":"_posts/技术/Java/并发/2021-12-23-synchronized.md","raw":"---\ntitle: synchronized\nabbrlink: edea11bc\ndate: 2021-12-23 10:47:33\ntags:\n- Java\n- 并发\ncategories:\n- [Java, 并发]\n---\n## 常见错误  \n\n&emsp;&emsp;最近比较深入的研究了一下synchronized,发现网上百分之90的博客都是错的,下边我首先来总结一下一些常见的错误:\n\n- <font color=\"red\">无锁->偏向->轻量->重量</font>  \n\n    认为锁对象的状态转换是这么个流程的同学请刷个1,这里边存在两个问题\n    1. **并不存在无锁到偏向**这么一个过程,偏向锁只能从可偏向状态或者重偏向状态获得.  \n    偏向锁模式存在偏向锁延迟机制：\n\n        ```java\n            HotSpot 虚拟机在启动后有个 4s 的延迟才会对每个新建的对象开启偏向锁模式。JVM启动时会进行一系列的复杂活动，比如装载配置，系统类初始化等等。在这个过程中会使用大量\n            synchronized关键字对对象加锁，且这些锁大多数都不是偏向锁。为了减少初始化时间，JVM默认延时加载偏向锁。\n        ```  \n\n        在过了这个延迟偏向时间后创建出来的新对象都是可偏向状态,并不是无锁状态(除非触发了批量撤销),重偏向是触发了批量重偏向后的逻辑,只有两种获得偏向锁的途径,并不存在无锁->偏向锁.  \n    2. 偏向->轻量  \n        这个也不是一定的,轻量锁会出现在线程**交替执行**的时候.  \n\n        假如一把锁先偏向了线程A,此时A的同步代码块里的内容已执行完,并且A已释放锁(释放偏向锁并不会做什么),但是线程A还存活(如果不存活可能触发jvm层面的线程复用,直接想线程B与Jvm的线程绑定),现在线程B尝试去获取锁,此时线程B就会触发偏向锁撤销,然后将偏向锁升级为一把轻量锁.  \n\n\n        很多同学认为升级重量锁必须要激烈并发,其实不然,比如上边那个场景,如果线程B去获取锁的时候,线程A还没有释放锁,线程B会尝试获取轻量锁,但是轻量锁获取失败,线程B会直接开始膨胀,创建Monitor对象,升级为重量锁,所以升级重量锁和竞争激烈与否并没有关系,**只要有竞争,就会升级成重量锁**;\n        总结下获取锁的过程:首先看锁对象是否是可偏向,或者是否是可重偏向状态,如果是直接获取偏向锁,如果不是尝试获取轻量锁,轻量锁获取失败,直接开始膨胀为重量锁;\n- <font color=\"red\">轻量锁自旋</font>  \n    轻量锁和偏向锁都不存在自旋,只是会尝试获取,CAS获取失败直接走下一步;\n\n## 阅读源码与实验的一些发现  \n\n- 批量重偏向修改epoch修改的是正在被锁定的对象**和可偏向对象的epoch**,网上很多博客说的都是修改正在被锁定对象的epoch\n- 批量重偏向和批量撤销共用一个计数器 都会在25秒(默认值))后归零  \n\n```C++\n    static HeuristicsResult update_heuristics(oop o, bool allow_rebias) {\n        markOop mark = o->mark();\n        //如果不是偏向模式直接返回\n        if (!mark->has_bias_pattern()) {\n            return HR_NOT_BIASED;\n        }\n        // 锁对象的类\n        Klass* k = o->klass();\n        // 当前时间\n        jlong cur_time = os::javaTimeMillis();\n        // 该类上一次批量撤销的时间\n        jlong last_bulk_revocation_time = k->last_biased_lock_bulk_revocation_time();\n        // 该类偏向锁撤销的次数\n        int revocation_count = k->biased_lock_revocation_count();\n        // BiasedLockingBulkRebiasThreshold是重偏向阈值（默认20），BiasedLockingBulkRevokeThreshold是批量撤销阈值（默认40），BiasedLockingDecayTime是开启一次新的批量重偏向距离上次批量重偏向的后的延迟时间，默认25000。也就是开启批量重偏向后，经过了一段较长的时间（>=BiasedLockingDecayTime），撤销计数器才超过阈值，那我们会重置计数器。\n        if ((revocation_count >= BiasedLockingBulkRebiasThreshold) &&\n            (revocation_count <  BiasedLockingBulkRevokeThreshold) &&\n            (last_bulk_revocation_time != 0) &&\n            (cur_time - last_bulk_revocation_time >= BiasedLockingDecayTime)) {\n            // This is the first revocation we've seen in a while of an\n            // object of this type since the last time we performed a bulk\n            // rebiasing operation. The application is allocating objects in\n            // bulk which are biased toward a thread and then handing them\n            // off to another thread. We can cope with this allocation\n            // pattern via the bulk rebiasing mechanism so we reset the\n            // klass's revocation count rather than allow it to increase\n            // monotonically. If we see the need to perform another bulk\n            // rebias operation later, we will, and if subsequently we see\n            // many more revocation operations in a short period of time we\n            // will completely disable biasing for this type.\n            k->set_biased_lock_revocation_count(0);\n            revocation_count = 0;\n        }\n\n        // 自增撤销计数器\n        if (revocation_count <= BiasedLockingBulkRevokeThreshold) {\n            revocation_count = k->atomic_incr_biased_lock_revocation_count();\n        }\n        // 如果达到批量撤销阈值则返回HR_BULK_REVOKE\n        if (revocation_count == BiasedLockingBulkRevokeThreshold) {\n            return HR_BULK_REVOKE;\n        }\n        // 如果达到批量重偏向阈值则返回HR_BULK_REBIAS\n        if (revocation_count == BiasedLockingBulkRebiasThreshold) {\n            return HR_BULK_REBIAS;\n        }\n        // 没有达到阈值则撤销单个对象的锁\n        return HR_SINGLE_REVOKE;\n    }\n```\n\n### 验证\n\n```java\n    @Slf4j\n    public class Test {\n\n        public static void main(String[] args) throws InterruptedException {\n            //延时产生可偏向对象\n            Thread.sleep(5000);\n\n            // 创建一个list，来存放锁对象\n            List<Test> locks = new ArrayList<>();\n\n            // 线程1\n            new Thread(() -> {\n                for (int i = 0; i < 30; i++) {\n                    // 新建锁对象\n                    Test lock = new Test();\n                    synchronized (lock) {\n                        locks.add(lock);\n                    }\n                }\n                try {\n                    //为了防止JVM线程复用，在创建完对象后，保持线程thead1状态为存活\n                    Thread.sleep(100000);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n            }, \"thead1\").start();\n\n            //睡眠3s钟保证线程thead1创建对象完成\n            Thread.sleep(1000);\n            // 线程2\n            new Thread(() -> {\n                for (int i = 0; i < 30; i++) {\n                    Test obj = locks.get(i);\n                    synchronized (obj) {\n                        if(i>=15&&i<=21||i>=38){\n                            log.debug(Thread.currentThread().getName()+\"-第\" + (i + 1) + \"次加锁执行中\\t\"+\n                                            ClassLayout.parseInstance(obj).toPrintable());\n                        }\n                    }\n                    if(i==17||i==19){\n                        log.debug(Thread.currentThread().getName()+\"-第\" + (i + 1) + \"次释放锁\\t\"+\n                                        ClassLayout.parseInstance(obj).toPrintable());\n                    }\n                }\n                try {\n                    Thread.sleep(100000);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n            }, \"thead2\").start();\n        /*如果下边的20-30个对象任然可以重偏向,则说明批量重偏向和批量撤销共用一个计数器 都会在25秒(默认值)后归零,\n          而且最后new的新对象任然是可偏向状态101,如果注释掉的话这行代码则创建的新对象是无锁状态(批量撤销,关闭该Class的偏向锁功能),\n          而且下边的20-30个对象会变成轻量锁*/\n            Thread.sleep(26000);\n\n            // 创建一个list，来存放锁对象\n            List<Test> locks1 = new ArrayList<>();\n\n            // 线程1\n            new Thread(() -> {\n                for (int i = 0; i < 30; i++) {\n                    // 新建锁对象\n                    Test lock = new Test();\n                    synchronized (lock) {\n                        locks1.add(lock);\n                    }\n                }\n                try {\n                    //为了防止JVM线程复用，在创建完对象后，保持线程thead1状态为存活\n                    Thread.sleep(100000);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n            }, \"thead3\").start();\n\n            //睡眠3s钟保证线程thead1创建对象完成\n            Thread.sleep(1000);\n            // 线程2\n            new Thread(() -> {\n                for (int i = 0; i < 30; i++) {\n                    Test obj = locks1.get(i);\n                    synchronized (obj) {\n                        if(i>=15&&i<=21||i>=38){\n                            log.debug(Thread.currentThread().getName()+\"-第\" + (i + 1) + \"次加锁执行中\\t\"+\n                                            ClassLayout.parseInstance(obj).toPrintable());\n                        }\n                    }\n                    if(i==17||i==19){\n                        log.debug(Thread.currentThread().getName()+\"-第\" + (i + 1) + \"次释放锁\\t\"+\n                                        ClassLayout.parseInstance(obj).toPrintable());\n                    }\n                }\n                try {\n                    Thread.sleep(100000);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n            }, \"thead4\").start();\n            Thread.sleep(3000);\n            Test test = new Test();\n            log.debug(\"新对象:\" + (ClassLayout.parseInstance(test).toPrintable()));\n            LockSupport.park();\n        }\n    }\n```\n\n其他介绍请参考[github](https://github.com/farmerjohngit/myblog/issues/12),这是一篇非常好的博客,写的很详细,我也就不重复总结了.  \n","slug":"技术-Java-并发-2021-12-23-synchronized","published":1,"updated":"2021-12-24T11:52:41.907Z","_id":"ckxkbu7uz0001hj6o36o33u1q","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"常见错误\"><a href=\"#常见错误\" class=\"headerlink\" title=\"常见错误\"></a>常见错误</h2><p>&emsp;&emsp;最近比较深入的研究了一下synchronized,发现网上百分之90的博客都是错的,下边我首先来总结一下一些常见的错误:</p>\n<ul>\n<li><p><font color=\"red\">无锁-&gt;偏向-&gt;轻量-&gt;重量</font>  </p>\n<p>  认为锁对象的状态转换是这么个流程的同学请刷个1,这里边存在两个问题</p>\n<ol>\n<li><p><strong>并不存在无锁到偏向</strong>这么一个过程,偏向锁只能从可偏向状态或者重偏向状态获得.<br>偏向锁模式存在偏向锁延迟机制：</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">            HotSpot 虚拟机在启动后有个 4s 的延迟才会对每个新建的对象开启偏向锁模式。JVM启动时会进行一系列的复杂活动，比如装载配置，系统类初始化等等。在这个过程中会使用大量</span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span>关键字对对象加锁，且这些锁大多数都不是偏向锁。为了减少初始化时间，JVM默认延时加载偏向锁。</span><br><span class=\"line\">        ```  </span><br><span class=\"line\"></span><br><span class=\"line\">        在过了这个延迟偏向时间后创建出来的新对象都是可偏向状态,并不是无锁状态(除非触发了批量撤销),重偏向是触发了批量重偏向后的逻辑,只有两种获得偏向锁的途径,并不存在无锁-&gt;偏向锁.  </span><br><span class=\"line\">    <span class=\"number\">2.</span> 偏向-&gt;轻量  </span><br><span class=\"line\">        这个也不是一定的,轻量锁会出现在线程**交替执行**的时候.  </span><br><span class=\"line\"></span><br><span class=\"line\">        假如一把锁先偏向了线程A,此时A的同步代码块里的内容已执行完,并且A已释放锁(释放偏向锁并不会做什么),但是线程A还存活(如果不存活可能触发jvm层面的线程复用,直接想线程B与Jvm的线程绑定),现在线程B尝试去获取锁,此时线程B就会触发偏向锁撤销,然后将偏向锁升级为一把轻量锁.  </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        很多同学认为升级重量锁必须要激烈并发,其实不然,比如上边那个场景,如果线程B去获取锁的时候,线程A还没有释放锁,线程B会尝试获取轻量锁,但是轻量锁获取失败,线程B会直接开始膨胀,创建Monitor对象,升级为重量锁,所以升级重量锁和竞争激烈与否并没有关系,**只要有竞争,就会升级成重量锁**;</span><br><span class=\"line\">        总结下获取锁的过程:首先看锁对象是否是可偏向,或者是否是可重偏向状态,如果是直接获取偏向锁,如果不是尝试获取轻量锁,轻量锁获取失败,直接开始膨胀为重量锁;</span><br><span class=\"line\">- &lt;font color=<span class=\"string\">&quot;red&quot;</span>&gt;轻量锁自旋&lt;/font&gt;  </span><br><span class=\"line\">    轻量锁和偏向锁都不存在自旋,只是会尝试获取,CAS获取失败直接走下一步;</span><br><span class=\"line\"></span><br><span class=\"line\">## 阅读源码与实验的一些发现  </span><br><span class=\"line\"></span><br><span class=\"line\">- 批量重偏向修改epoch修改的是正在被锁定的对象**和可偏向对象的epoch**,网上很多博客说的都是修改正在被锁定对象的epoch</span><br><span class=\"line\">- 批量重偏向和批量撤销共用一个计数器 都会在<span class=\"number\">25</span>秒(默认值))后归零  </span><br><span class=\"line\"></span><br><span class=\"line\">```C++</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> HeuristicsResult <span class=\"title\">update_heuristics</span><span class=\"params\">(oop o, bool allow_rebias)</span> </span>&#123;</span><br><span class=\"line\">        markOop mark = o-&gt;mark();</span><br><span class=\"line\">        <span class=\"comment\">//如果不是偏向模式直接返回</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!mark-&gt;has_bias_pattern()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> HR_NOT_BIASED;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 锁对象的类</span></span><br><span class=\"line\">        Klass* k = o-&gt;klass();</span><br><span class=\"line\">        <span class=\"comment\">// 当前时间</span></span><br><span class=\"line\">        jlong cur_time = os::javaTimeMillis();</span><br><span class=\"line\">        <span class=\"comment\">// 该类上一次批量撤销的时间</span></span><br><span class=\"line\">        jlong last_bulk_revocation_time = k-&gt;last_biased_lock_bulk_revocation_time();</span><br><span class=\"line\">        <span class=\"comment\">// 该类偏向锁撤销的次数</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> revocation_count = k-&gt;biased_lock_revocation_count();</span><br><span class=\"line\">        <span class=\"comment\">// BiasedLockingBulkRebiasThreshold是重偏向阈值（默认20），BiasedLockingBulkRevokeThreshold是批量撤销阈值（默认40），BiasedLockingDecayTime是开启一次新的批量重偏向距离上次批量重偏向的后的延迟时间，默认25000。也就是开启批量重偏向后，经过了一段较长的时间（&gt;=BiasedLockingDecayTime），撤销计数器才超过阈值，那我们会重置计数器。</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((revocation_count &gt;= BiasedLockingBulkRebiasThreshold) &amp;&amp;</span><br><span class=\"line\">            (revocation_count &lt;  BiasedLockingBulkRevokeThreshold) &amp;&amp;</span><br><span class=\"line\">            (last_bulk_revocation_time != <span class=\"number\">0</span>) &amp;&amp;</span><br><span class=\"line\">            (cur_time - last_bulk_revocation_time &gt;= BiasedLockingDecayTime)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// This is the first revocation we&#x27;ve seen in a while of an</span></span><br><span class=\"line\">            <span class=\"comment\">// object of this type since the last time we performed a bulk</span></span><br><span class=\"line\">            <span class=\"comment\">// rebiasing operation. The application is allocating objects in</span></span><br><span class=\"line\">            <span class=\"comment\">// bulk which are biased toward a thread and then handing them</span></span><br><span class=\"line\">            <span class=\"comment\">// off to another thread. We can cope with this allocation</span></span><br><span class=\"line\">            <span class=\"comment\">// pattern via the bulk rebiasing mechanism so we reset the</span></span><br><span class=\"line\">            <span class=\"comment\">// klass&#x27;s revocation count rather than allow it to increase</span></span><br><span class=\"line\">            <span class=\"comment\">// monotonically. If we see the need to perform another bulk</span></span><br><span class=\"line\">            <span class=\"comment\">// rebias operation later, we will, and if subsequently we see</span></span><br><span class=\"line\">            <span class=\"comment\">// many more revocation operations in a short period of time we</span></span><br><span class=\"line\">            <span class=\"comment\">// will completely disable biasing for this type.</span></span><br><span class=\"line\">            k-&gt;set_biased_lock_revocation_count(<span class=\"number\">0</span>);</span><br><span class=\"line\">            revocation_count = <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 自增撤销计数器</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (revocation_count &lt;= BiasedLockingBulkRevokeThreshold) &#123;</span><br><span class=\"line\">            revocation_count = k-&gt;atomic_incr_biased_lock_revocation_count();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 如果达到批量撤销阈值则返回HR_BULK_REVOKE</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (revocation_count == BiasedLockingBulkRevokeThreshold) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> HR_BULK_REVOKE;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 如果达到批量重偏向阈值则返回HR_BULK_REBIAS</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (revocation_count == BiasedLockingBulkRebiasThreshold) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> HR_BULK_REBIAS;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 没有达到阈值则撤销单个对象的锁</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> HR_SINGLE_REVOKE;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n</li>\n</ul>\n<h3 id=\"验证\"><a href=\"#验证\" class=\"headerlink\" title=\"验证\"></a>验证</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//延时产生可偏向对象</span></span><br><span class=\"line\">        Thread.sleep(<span class=\"number\">5000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 创建一个list，来存放锁对象</span></span><br><span class=\"line\">        List&lt;Test&gt; locks = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 线程1</span></span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">30</span>; i++) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 新建锁对象</span></span><br><span class=\"line\">                Test lock = <span class=\"keyword\">new</span> Test();</span><br><span class=\"line\">                <span class=\"keyword\">synchronized</span> (lock) &#123;</span><br><span class=\"line\">                    locks.add(lock);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">//为了防止JVM线程复用，在创建完对象后，保持线程thead1状态为存活</span></span><br><span class=\"line\">                Thread.sleep(<span class=\"number\">100000</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, <span class=\"string\">&quot;thead1&quot;</span>).start();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//睡眠3s钟保证线程thead1创建对象完成</span></span><br><span class=\"line\">        Thread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 线程2</span></span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">30</span>; i++) &#123;</span><br><span class=\"line\">                Test obj = locks.get(i);</span><br><span class=\"line\">                <span class=\"keyword\">synchronized</span> (obj) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(i&gt;=<span class=\"number\">15</span>&amp;&amp;i&lt;=<span class=\"number\">21</span>||i&gt;=<span class=\"number\">38</span>)&#123;</span><br><span class=\"line\">                        log.debug(Thread.currentThread().getName()+<span class=\"string\">&quot;-第&quot;</span> + (i + <span class=\"number\">1</span>) + <span class=\"string\">&quot;次加锁执行中\\t&quot;</span>+</span><br><span class=\"line\">                                        ClassLayout.parseInstance(obj).toPrintable());</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(i==<span class=\"number\">17</span>||i==<span class=\"number\">19</span>)&#123;</span><br><span class=\"line\">                    log.debug(Thread.currentThread().getName()+<span class=\"string\">&quot;-第&quot;</span> + (i + <span class=\"number\">1</span>) + <span class=\"string\">&quot;次释放锁\\t&quot;</span>+</span><br><span class=\"line\">                                    ClassLayout.parseInstance(obj).toPrintable());</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                Thread.sleep(<span class=\"number\">100000</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, <span class=\"string\">&quot;thead2&quot;</span>).start();</span><br><span class=\"line\">    <span class=\"comment\">/*如果下边的20-30个对象任然可以重偏向,则说明批量重偏向和批量撤销共用一个计数器 都会在25秒(默认值)后归零,</span></span><br><span class=\"line\"><span class=\"comment\">      而且最后new的新对象任然是可偏向状态101,如果注释掉的话这行代码则创建的新对象是无锁状态(批量撤销,关闭该Class的偏向锁功能),</span></span><br><span class=\"line\"><span class=\"comment\">      而且下边的20-30个对象会变成轻量锁*/</span></span><br><span class=\"line\">        Thread.sleep(<span class=\"number\">26000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 创建一个list，来存放锁对象</span></span><br><span class=\"line\">        List&lt;Test&gt; locks1 = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 线程1</span></span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">30</span>; i++) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 新建锁对象</span></span><br><span class=\"line\">                Test lock = <span class=\"keyword\">new</span> Test();</span><br><span class=\"line\">                <span class=\"keyword\">synchronized</span> (lock) &#123;</span><br><span class=\"line\">                    locks1.add(lock);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">//为了防止JVM线程复用，在创建完对象后，保持线程thead1状态为存活</span></span><br><span class=\"line\">                Thread.sleep(<span class=\"number\">100000</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, <span class=\"string\">&quot;thead3&quot;</span>).start();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//睡眠3s钟保证线程thead1创建对象完成</span></span><br><span class=\"line\">        Thread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 线程2</span></span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">30</span>; i++) &#123;</span><br><span class=\"line\">                Test obj = locks1.get(i);</span><br><span class=\"line\">                <span class=\"keyword\">synchronized</span> (obj) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(i&gt;=<span class=\"number\">15</span>&amp;&amp;i&lt;=<span class=\"number\">21</span>||i&gt;=<span class=\"number\">38</span>)&#123;</span><br><span class=\"line\">                        log.debug(Thread.currentThread().getName()+<span class=\"string\">&quot;-第&quot;</span> + (i + <span class=\"number\">1</span>) + <span class=\"string\">&quot;次加锁执行中\\t&quot;</span>+</span><br><span class=\"line\">                                        ClassLayout.parseInstance(obj).toPrintable());</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(i==<span class=\"number\">17</span>||i==<span class=\"number\">19</span>)&#123;</span><br><span class=\"line\">                    log.debug(Thread.currentThread().getName()+<span class=\"string\">&quot;-第&quot;</span> + (i + <span class=\"number\">1</span>) + <span class=\"string\">&quot;次释放锁\\t&quot;</span>+</span><br><span class=\"line\">                                    ClassLayout.parseInstance(obj).toPrintable());</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                Thread.sleep(<span class=\"number\">100000</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, <span class=\"string\">&quot;thead4&quot;</span>).start();</span><br><span class=\"line\">        Thread.sleep(<span class=\"number\">3000</span>);</span><br><span class=\"line\">        Test test = <span class=\"keyword\">new</span> Test();</span><br><span class=\"line\">        log.debug(<span class=\"string\">&quot;新对象:&quot;</span> + (ClassLayout.parseInstance(test).toPrintable()));</span><br><span class=\"line\">        LockSupport.park();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>其他介绍请参考<a href=\"https://github.com/farmerjohngit/myblog/issues/12\">github</a>,这是一篇非常好的博客,写的很详细,我也就不重复总结了.  </p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"常见错误\"><a href=\"#常见错误\" class=\"headerlink\" title=\"常见错误\"></a>常见错误</h2><p>&emsp;&emsp;最近比较深入的研究了一下synchronized,发现网上百分之90的博客都是错的,下边我首先来总结一下一些常见的错误:</p>\n<ul>\n<li><p><font color=\"red\">无锁-&gt;偏向-&gt;轻量-&gt;重量</font>  </p>\n<p>  认为锁对象的状态转换是这么个流程的同学请刷个1,这里边存在两个问题</p>\n<ol>\n<li><p><strong>并不存在无锁到偏向</strong>这么一个过程,偏向锁只能从可偏向状态或者重偏向状态获得.<br>偏向锁模式存在偏向锁延迟机制：</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">            HotSpot 虚拟机在启动后有个 4s 的延迟才会对每个新建的对象开启偏向锁模式。JVM启动时会进行一系列的复杂活动，比如装载配置，系统类初始化等等。在这个过程中会使用大量</span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span>关键字对对象加锁，且这些锁大多数都不是偏向锁。为了减少初始化时间，JVM默认延时加载偏向锁。</span><br><span class=\"line\">        ```  </span><br><span class=\"line\"></span><br><span class=\"line\">        在过了这个延迟偏向时间后创建出来的新对象都是可偏向状态,并不是无锁状态(除非触发了批量撤销),重偏向是触发了批量重偏向后的逻辑,只有两种获得偏向锁的途径,并不存在无锁-&gt;偏向锁.  </span><br><span class=\"line\">    <span class=\"number\">2.</span> 偏向-&gt;轻量  </span><br><span class=\"line\">        这个也不是一定的,轻量锁会出现在线程**交替执行**的时候.  </span><br><span class=\"line\"></span><br><span class=\"line\">        假如一把锁先偏向了线程A,此时A的同步代码块里的内容已执行完,并且A已释放锁(释放偏向锁并不会做什么),但是线程A还存活(如果不存活可能触发jvm层面的线程复用,直接想线程B与Jvm的线程绑定),现在线程B尝试去获取锁,此时线程B就会触发偏向锁撤销,然后将偏向锁升级为一把轻量锁.  </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        很多同学认为升级重量锁必须要激烈并发,其实不然,比如上边那个场景,如果线程B去获取锁的时候,线程A还没有释放锁,线程B会尝试获取轻量锁,但是轻量锁获取失败,线程B会直接开始膨胀,创建Monitor对象,升级为重量锁,所以升级重量锁和竞争激烈与否并没有关系,**只要有竞争,就会升级成重量锁**;</span><br><span class=\"line\">        总结下获取锁的过程:首先看锁对象是否是可偏向,或者是否是可重偏向状态,如果是直接获取偏向锁,如果不是尝试获取轻量锁,轻量锁获取失败,直接开始膨胀为重量锁;</span><br><span class=\"line\">- &lt;font color=<span class=\"string\">&quot;red&quot;</span>&gt;轻量锁自旋&lt;/font&gt;  </span><br><span class=\"line\">    轻量锁和偏向锁都不存在自旋,只是会尝试获取,CAS获取失败直接走下一步;</span><br><span class=\"line\"></span><br><span class=\"line\">## 阅读源码与实验的一些发现  </span><br><span class=\"line\"></span><br><span class=\"line\">- 批量重偏向修改epoch修改的是正在被锁定的对象**和可偏向对象的epoch**,网上很多博客说的都是修改正在被锁定对象的epoch</span><br><span class=\"line\">- 批量重偏向和批量撤销共用一个计数器 都会在<span class=\"number\">25</span>秒(默认值))后归零  </span><br><span class=\"line\"></span><br><span class=\"line\">```C++</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> HeuristicsResult <span class=\"title\">update_heuristics</span><span class=\"params\">(oop o, bool allow_rebias)</span> </span>&#123;</span><br><span class=\"line\">        markOop mark = o-&gt;mark();</span><br><span class=\"line\">        <span class=\"comment\">//如果不是偏向模式直接返回</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!mark-&gt;has_bias_pattern()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> HR_NOT_BIASED;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 锁对象的类</span></span><br><span class=\"line\">        Klass* k = o-&gt;klass();</span><br><span class=\"line\">        <span class=\"comment\">// 当前时间</span></span><br><span class=\"line\">        jlong cur_time = os::javaTimeMillis();</span><br><span class=\"line\">        <span class=\"comment\">// 该类上一次批量撤销的时间</span></span><br><span class=\"line\">        jlong last_bulk_revocation_time = k-&gt;last_biased_lock_bulk_revocation_time();</span><br><span class=\"line\">        <span class=\"comment\">// 该类偏向锁撤销的次数</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> revocation_count = k-&gt;biased_lock_revocation_count();</span><br><span class=\"line\">        <span class=\"comment\">// BiasedLockingBulkRebiasThreshold是重偏向阈值（默认20），BiasedLockingBulkRevokeThreshold是批量撤销阈值（默认40），BiasedLockingDecayTime是开启一次新的批量重偏向距离上次批量重偏向的后的延迟时间，默认25000。也就是开启批量重偏向后，经过了一段较长的时间（&gt;=BiasedLockingDecayTime），撤销计数器才超过阈值，那我们会重置计数器。</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((revocation_count &gt;= BiasedLockingBulkRebiasThreshold) &amp;&amp;</span><br><span class=\"line\">            (revocation_count &lt;  BiasedLockingBulkRevokeThreshold) &amp;&amp;</span><br><span class=\"line\">            (last_bulk_revocation_time != <span class=\"number\">0</span>) &amp;&amp;</span><br><span class=\"line\">            (cur_time - last_bulk_revocation_time &gt;= BiasedLockingDecayTime)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// This is the first revocation we&#x27;ve seen in a while of an</span></span><br><span class=\"line\">            <span class=\"comment\">// object of this type since the last time we performed a bulk</span></span><br><span class=\"line\">            <span class=\"comment\">// rebiasing operation. The application is allocating objects in</span></span><br><span class=\"line\">            <span class=\"comment\">// bulk which are biased toward a thread and then handing them</span></span><br><span class=\"line\">            <span class=\"comment\">// off to another thread. We can cope with this allocation</span></span><br><span class=\"line\">            <span class=\"comment\">// pattern via the bulk rebiasing mechanism so we reset the</span></span><br><span class=\"line\">            <span class=\"comment\">// klass&#x27;s revocation count rather than allow it to increase</span></span><br><span class=\"line\">            <span class=\"comment\">// monotonically. If we see the need to perform another bulk</span></span><br><span class=\"line\">            <span class=\"comment\">// rebias operation later, we will, and if subsequently we see</span></span><br><span class=\"line\">            <span class=\"comment\">// many more revocation operations in a short period of time we</span></span><br><span class=\"line\">            <span class=\"comment\">// will completely disable biasing for this type.</span></span><br><span class=\"line\">            k-&gt;set_biased_lock_revocation_count(<span class=\"number\">0</span>);</span><br><span class=\"line\">            revocation_count = <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 自增撤销计数器</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (revocation_count &lt;= BiasedLockingBulkRevokeThreshold) &#123;</span><br><span class=\"line\">            revocation_count = k-&gt;atomic_incr_biased_lock_revocation_count();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 如果达到批量撤销阈值则返回HR_BULK_REVOKE</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (revocation_count == BiasedLockingBulkRevokeThreshold) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> HR_BULK_REVOKE;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 如果达到批量重偏向阈值则返回HR_BULK_REBIAS</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (revocation_count == BiasedLockingBulkRebiasThreshold) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> HR_BULK_REBIAS;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 没有达到阈值则撤销单个对象的锁</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> HR_SINGLE_REVOKE;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n</li>\n</ul>\n<h3 id=\"验证\"><a href=\"#验证\" class=\"headerlink\" title=\"验证\"></a>验证</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//延时产生可偏向对象</span></span><br><span class=\"line\">        Thread.sleep(<span class=\"number\">5000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 创建一个list，来存放锁对象</span></span><br><span class=\"line\">        List&lt;Test&gt; locks = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 线程1</span></span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">30</span>; i++) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 新建锁对象</span></span><br><span class=\"line\">                Test lock = <span class=\"keyword\">new</span> Test();</span><br><span class=\"line\">                <span class=\"keyword\">synchronized</span> (lock) &#123;</span><br><span class=\"line\">                    locks.add(lock);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">//为了防止JVM线程复用，在创建完对象后，保持线程thead1状态为存活</span></span><br><span class=\"line\">                Thread.sleep(<span class=\"number\">100000</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, <span class=\"string\">&quot;thead1&quot;</span>).start();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//睡眠3s钟保证线程thead1创建对象完成</span></span><br><span class=\"line\">        Thread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 线程2</span></span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">30</span>; i++) &#123;</span><br><span class=\"line\">                Test obj = locks.get(i);</span><br><span class=\"line\">                <span class=\"keyword\">synchronized</span> (obj) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(i&gt;=<span class=\"number\">15</span>&amp;&amp;i&lt;=<span class=\"number\">21</span>||i&gt;=<span class=\"number\">38</span>)&#123;</span><br><span class=\"line\">                        log.debug(Thread.currentThread().getName()+<span class=\"string\">&quot;-第&quot;</span> + (i + <span class=\"number\">1</span>) + <span class=\"string\">&quot;次加锁执行中\\t&quot;</span>+</span><br><span class=\"line\">                                        ClassLayout.parseInstance(obj).toPrintable());</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(i==<span class=\"number\">17</span>||i==<span class=\"number\">19</span>)&#123;</span><br><span class=\"line\">                    log.debug(Thread.currentThread().getName()+<span class=\"string\">&quot;-第&quot;</span> + (i + <span class=\"number\">1</span>) + <span class=\"string\">&quot;次释放锁\\t&quot;</span>+</span><br><span class=\"line\">                                    ClassLayout.parseInstance(obj).toPrintable());</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                Thread.sleep(<span class=\"number\">100000</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, <span class=\"string\">&quot;thead2&quot;</span>).start();</span><br><span class=\"line\">    <span class=\"comment\">/*如果下边的20-30个对象任然可以重偏向,则说明批量重偏向和批量撤销共用一个计数器 都会在25秒(默认值)后归零,</span></span><br><span class=\"line\"><span class=\"comment\">      而且最后new的新对象任然是可偏向状态101,如果注释掉的话这行代码则创建的新对象是无锁状态(批量撤销,关闭该Class的偏向锁功能),</span></span><br><span class=\"line\"><span class=\"comment\">      而且下边的20-30个对象会变成轻量锁*/</span></span><br><span class=\"line\">        Thread.sleep(<span class=\"number\">26000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 创建一个list，来存放锁对象</span></span><br><span class=\"line\">        List&lt;Test&gt; locks1 = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 线程1</span></span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">30</span>; i++) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 新建锁对象</span></span><br><span class=\"line\">                Test lock = <span class=\"keyword\">new</span> Test();</span><br><span class=\"line\">                <span class=\"keyword\">synchronized</span> (lock) &#123;</span><br><span class=\"line\">                    locks1.add(lock);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">//为了防止JVM线程复用，在创建完对象后，保持线程thead1状态为存活</span></span><br><span class=\"line\">                Thread.sleep(<span class=\"number\">100000</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, <span class=\"string\">&quot;thead3&quot;</span>).start();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//睡眠3s钟保证线程thead1创建对象完成</span></span><br><span class=\"line\">        Thread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 线程2</span></span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">30</span>; i++) &#123;</span><br><span class=\"line\">                Test obj = locks1.get(i);</span><br><span class=\"line\">                <span class=\"keyword\">synchronized</span> (obj) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(i&gt;=<span class=\"number\">15</span>&amp;&amp;i&lt;=<span class=\"number\">21</span>||i&gt;=<span class=\"number\">38</span>)&#123;</span><br><span class=\"line\">                        log.debug(Thread.currentThread().getName()+<span class=\"string\">&quot;-第&quot;</span> + (i + <span class=\"number\">1</span>) + <span class=\"string\">&quot;次加锁执行中\\t&quot;</span>+</span><br><span class=\"line\">                                        ClassLayout.parseInstance(obj).toPrintable());</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(i==<span class=\"number\">17</span>||i==<span class=\"number\">19</span>)&#123;</span><br><span class=\"line\">                    log.debug(Thread.currentThread().getName()+<span class=\"string\">&quot;-第&quot;</span> + (i + <span class=\"number\">1</span>) + <span class=\"string\">&quot;次释放锁\\t&quot;</span>+</span><br><span class=\"line\">                                    ClassLayout.parseInstance(obj).toPrintable());</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                Thread.sleep(<span class=\"number\">100000</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, <span class=\"string\">&quot;thead4&quot;</span>).start();</span><br><span class=\"line\">        Thread.sleep(<span class=\"number\">3000</span>);</span><br><span class=\"line\">        Test test = <span class=\"keyword\">new</span> Test();</span><br><span class=\"line\">        log.debug(<span class=\"string\">&quot;新对象:&quot;</span> + (ClassLayout.parseInstance(test).toPrintable()));</span><br><span class=\"line\">        LockSupport.park();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>其他介绍请参考<a href=\"https://github.com/farmerjohngit/myblog/issues/12\">github</a>,这是一篇非常好的博客,写的很详细,我也就不重复总结了.  </p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ckxkbu7uz0001hj6o36o33u1q","category_id":"ckxkbu7v40004hj6o817554dt","_id":"ckxkbu7v60009hj6ogakv62dy"},{"post_id":"ckxkbu7uz0001hj6o36o33u1q","category_id":"ckxkbu7v50006hj6ohywafg59","_id":"ckxkbu7v6000ahj6oaek18qlf"}],"PostTag":[{"post_id":"ckxkbu7uz0001hj6o36o33u1q","tag_id":"ckxkbu7v30003hj6oav2f0m3z","_id":"ckxkbu7v60007hj6obqqn9qfy"},{"post_id":"ckxkbu7uz0001hj6o36o33u1q","tag_id":"ckxkbu7v50005hj6o9k1u3ygu","_id":"ckxkbu7v60008hj6o56bh82wm"}],"Tag":[{"name":"Java","_id":"ckxkbu7v30003hj6oav2f0m3z"},{"name":"并发","_id":"ckxkbu7v50005hj6o9k1u3ygu"}]}}